package de.feu.propra18.q9512268.app.main;

import java.util.Comparator;

import de.feu.propra18.q9512268.app.objects.Point;
import de.feu.propra18.q9512268.app.objects.PointType;
import javafx.beans.Observable;
import javafx.collections.FXCollections;
import javafx.collections.ObservableList;
import javafx.collections.transformation.SortedList;
import javafx.util.Callback;

class PointsContainer {

	private static final PointsContainer INSTANCE = new PointsContainer();

	private SortedList<Point> sortedPoints;
	private ObservableList<Point> allPoints;
	private ObservableList<Point> allPointsOuter;
	private ObservableList<Double> convexHullPoints;

	private PointsContainer() {

		allPoints = createObservablePointArrayList();
		allPointsOuter = createObservablePointArrayList();

		Comparator<Point> xComparator = (p1, p2) -> {
			int result = Double.compare(p1.getCenterX(), p2.getCenterX());
			if (result == 0) {
				return Double.compare(p1.getCenterY(), p2.getCenterY());
			}
			return result;
		};

		sortedPoints = allPoints.sorted(xComparator);
		convexHullPoints = FXCollections.observableArrayList();

	}

	private ObservableList<Point> createObservablePointArrayList() {
		return FXCollections.observableArrayList(new Callback<Point, Observable[]>() {
			@Override
			public Observable[] call(Point param) {
				return new Observable[] { param.centerXProperty(), param.centerYProperty() };
			}
		});
	}

	static PointsContainer get_Instance() {
		return INSTANCE;
	}

	ObservableList<Point> get_PointsAll() {
		return allPoints;
	}

	ObservableList<Point> get_PointsAllOuter() {
		return allPointsOuter;
	}

	SortedList<Point> get_PointsSorted() {
		return sortedPoints;
	}

	ObservableList<Double> get_PointsConvexHull() {
		return convexHullPoints;
	}

	int[][] get_PointsConvexHull_asArray() {

		int[][] convexHull = new int[convexHullPoints.size() / 2][2];
		int i = 0;
		int j = 0;
		while (i < convexHullPoints.size() - 1) {
			int[] row = convexHull[j];
			row[0] = convexHullPoints.get(i).intValue();
			row[1] = convexHullPoints.get(i + 1).intValue();
			i = i + 2;
			j++;
		}

		return convexHull;

	}

	void add_PointConvexHull(Double d) {
		convexHullPoints.add(d);
	}

	void add_Point(Point p) {

		PointType type = p.getType();
		switch (type) {
		case INNER:
			allPoints.add(p);
			allPointsOuter.add(p.getSibling());
			break;
		case OUTER:
			allPoints.add(p.getSibling());
			allPointsOuter.add(p);
			break;
		}
	}

	boolean contains_Point(Point p) {
		return allPoints.contains(p);
	}

	void remove_Point(Point p) {

		PointType type = p.getType();
		switch (type) {
		case INNER:
			allPoints.remove(p);
			allPointsOuter.remove(p.getSibling());
			break;
		case OUTER:
			allPointsOuter.remove(p);
			allPoints.remove(p.getSibling());
			break;
		}

	}

	void remove_AllPoints() {
		allPoints.clear();
		allPointsOuter.clear();
	}

	void remove_AllConvexHullPoints() {
		convexHullPoints.clear();
	}

}
