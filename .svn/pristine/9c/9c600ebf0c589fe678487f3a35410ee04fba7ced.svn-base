package de.feu.propra18.q9512268.app.main;

import java.util.Comparator;
import java.util.TreeSet;

import de.feu.propra18.q9512268.app.objects.Point;
import de.feu.propra18.q9512268.app.objects.SimplePoint;

final class ConvexOutlineRightCalculator extends ConvexOutlineTemplate {

	@Override
	protected TreeSet<SimplePoint> createOutline() {

		Comparator<SimplePoint> yDescending = (p1, p2) -> Integer.compare(p2.getY(), p1.getY());

		TreeSet<SimplePoint> outline = new TreeSet<SimplePoint>(yDescending);

		Point min_y_so_far = currentPoints.get(currentPoints.size() - 1);
		Point max_y_so_far = currentPoints.get(currentPoints.size() - 1);
		outline.add(new SimplePoint(min_y_so_far.getX(), min_y_so_far.getY()));

		for (int i = currentPoints.size() - 1; i >= 0; i--) {
			Point point = currentPoints.get(i);
			if (point.getCenterY() < min_y_so_far.getCenterY()) {
				outline.add(new SimplePoint(point.getX(), point.getY()));
				min_y_so_far = point;
			}
			if (point.getCenterY() > max_y_so_far.getCenterY()) {
				outline.add(new SimplePoint(point.getX(), point.getY()));
				max_y_so_far = point;
			}
		}

		return outline;

	}

}
