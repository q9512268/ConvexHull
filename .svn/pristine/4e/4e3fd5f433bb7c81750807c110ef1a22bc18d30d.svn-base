package de.feu.propra18.q9512268.app.main.algorithm.circle;

import java.util.ArrayList;
import java.util.Comparator;
import java.util.LinkedList;
import java.util.List;
import java.util.TreeSet;

import de.feu.propra18.q9512268.app.main.container.MainFacade;
import de.feu.propra18.q9512268.app.main.objects.Edge;
import javafx.collections.ObservableList;

//TODO
public final class CircleAlgorithm {

	/**
	 * Private constructor to make sure class is only accessed in a static way.
	 */
	private CircleAlgorithm() {
	}

	// TODO
	public static List<Double> getGEKInfo() {

		List<Double> circleInformation = new ArrayList<Double>(3);

		ObservableList<Double> convexNodes = MainFacade.get_Instance().get_PointsConvexHull();

		if (convexNodes.size() == 2 || convexNodes.size() == 4) {

			double startX = convexNodes.get(0);
			double startY = convexNodes.get(1);
			circleInformation.add(startX);
			circleInformation.add(startY);
			circleInformation.add(0.0);
			return circleInformation;

		} else {

			List<Edge> edges = createEdges(convexNodes); // create edges from convex hull
			if (!edges.isEmpty()) {
				connectEdges(edges); // connect edges: set previous and next for each edge
			} else {
				throw new NullPointerException("no edges available");
			}

			// create set holding edges sorted by their inner circle radius
			Comparator<Edge> inCircleRadiusAscending = (p1, p2) -> Double.compare(
					p1.getInnerCircle().getRadius().doubleValue(), p2.getInnerCircle().getRadius().doubleValue());
			TreeSet<Edge> edgesRadiusSorted = new TreeSet<Edge>(inCircleRadiusAscending);
			edgesRadiusSorted.addAll(edges);
			filterEdges(edgesRadiusSorted); // filter edges by their inner circle radius until only largest included circle left

			if (!convexNodes.isEmpty()) {
				circleInformation.add(edgesRadiusSorted.first().getInnerCircle().getX().doubleValue());
				circleInformation.add(edgesRadiusSorted.first().getInnerCircle().getY().doubleValue());
				circleInformation.add(edgesRadiusSorted.first().getInnerCircle().getRadius().doubleValue());
				return circleInformation;
			}
		}

		throw new NullPointerException("no points available");

	}

	// TODO
	private static List<Edge> createEdges(ObservableList<Double> convexNodes) {

		List<Edge> list = new LinkedList<Edge>();

		int i = 0;
		int edgesCount = 0;
		while (i < convexNodes.size() - 1) {
			double startX;
			double startY;
			double endX;
			double endY;

			startX = convexNodes.get(i);
			startY = convexNodes.get(i + 1);
			if (i == convexNodes.size() - 2) {
				endX = convexNodes.get(0);
				endY = convexNodes.get(0 + 1);
			} else {
				endX = convexNodes.get(i + 2);
				endY = convexNodes.get(i + 3);
			}

			Edge edge = new Edge(edgesCount, startX, startY, endX, endY);
			list.add(edge);

			i = i + 2;
			edgesCount++;
		}

		return list;
	}

	// TODO
	private static void connectEdges(List<Edge> edges) {

		// connect first and last edges
		edges.get(0).setPrevious(edges.get(edges.size() - 1));
		edges.get(edges.size() - 1).setNext(edges.get(0));

		//connect remaining 
		for (int i = 0; i < edges.size(); i++) {
			Edge edge = edges.get(i);

			if (!(i - 1 < 0)) {
				edge.setPrevious(edges.get(i - 1));
			}
			if (!(i + 1 > edges.size()-1)) {
				edge.setNext(edges.get(i + 1));
			}
		}

	}

	// TODO
	private static void filterEdges(TreeSet<Edge> edgesRadiusSorted) {
		while (edgesRadiusSorted.size() > 3) {
			Edge min = edgesRadiusSorted.first();
			Edge min_previous = min.getPrevious();
			Edge min_next = min.getNext();

			edgesRadiusSorted.remove(min);
			edgesRadiusSorted.remove(min_previous);
			edgesRadiusSorted.remove(min_next);

			min_previous.setNext(min_next);
			min_next.setPrevious(min_previous);

			edgesRadiusSorted.add(min_previous);
			edgesRadiusSorted.add(min_next);

		}
	}

}
