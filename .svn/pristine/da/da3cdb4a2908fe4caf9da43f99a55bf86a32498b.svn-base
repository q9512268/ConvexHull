package de.feu.propra18.q9512268.app.main.algorithm.circle;

import java.util.ArrayList;
import java.util.Comparator;
import java.util.List;
import java.util.TreeSet;

import de.feu.propra18.q9512268.app.main.MainFacade;
import javafx.collections.ObservableList;

public final class CircleAlgorithm {

	/**
	 * Private constructor to make sure class is only accessed in a static way.
	 */
	private CircleAlgorithm() {
	}

	public static List<Double> getLargestIncludedCircle() {

		List<Double> circleInformation = new ArrayList<Double>(3);

		ObservableList<Double> convexNodes = MainFacade.get_Instance().get_PointsConvexHull();

		Comparator<Edge> IDAscending = (p1, p2) -> Double.compare(p1.getID(), p2.getID());
		TreeSet<Edge> edgesIDSorted = new TreeSet<Edge>(IDAscending);

		int i = 0;
		int edgesCount = 0;
		while (i < convexNodes.size() - 1) {
			double startX;
			double startY;
			double endX;
			double endY;

			startX = convexNodes.get(i);
			startY = convexNodes.get(i + 1);
			if (i == convexNodes.size() - 2) {
				endX = convexNodes.get(0);
				endY = convexNodes.get(0 + 1);
			} else {
				endX = convexNodes.get(i + 2);
				endY = convexNodes.get(i + 3);
			}

			Edge edge = new Edge(edgesCount, startX, startY, endX, endY);
			edgesIDSorted.add(edge);

			i = i + 2;
			edgesCount++;
		}
		
//		System.out.println("*********** EDGES UNCONNECTED ***********");
//		for (Edge edge : edgesIDSorted) {
//			System.out.println(edge);
//		}

		// CONNECT EDGES
		edgesIDSorted.first().setPrevious(edgesIDSorted.last());
		edgesIDSorted.last().setNext(edgesIDSorted.first());
		for (Edge edge : edgesIDSorted) {
			if (edgesIDSorted.lower(edge) != null) {
				edge.setPrevious(edgesIDSorted.lower(edge));
			}
			if (edgesIDSorted.higher(edge) != null) {
				edge.setNext(edgesIDSorted.higher(edge));
			}
		}		
//		System.out.println("*********** EDGES CONNECTED ***********");
//		for (Edge edge : edgesIDSorted) {
//			System.out.println(edge);
//		}
		

		Comparator<Edge> inCircleRadiusAscending = (p1, p2) -> Double.compare(p1.getInkreis().getRadius().doubleValue(),
				p2.getInkreis().getRadius().doubleValue());
		TreeSet<Edge> edgesRadiusSorted = new TreeSet<Edge>(inCircleRadiusAscending);
		
		edgesRadiusSorted.addAll(edgesIDSorted);
		
//		System.out.println(edgesRadiusSorted.size());
//		System.out.println("*********** EDGES edgesRadiusSorted ***********");
//		for (Edge edge : edgesRadiusSorted) {
//			System.out.println(edge);
//		}
//		
//		
//		System.out.println("######################");
//		System.out.println("######################");
//		
	
	while(edgesRadiusSorted.size() > 3) {
//			System.out.println("*********** DURCHLAUF ***********");
			
//			System.out.println("NOCH " +  edgesRadiusSorted.size() + " KANTEN.");
			Edge min = edgesRadiusSorted.first();
//			System.out.println("MIN: " + min);
			Edge min_previous = min.getPrevious();
			Edge min_next = min.getNext();
			
			//UPDATE PREVIOUS
			min_previous.setNext(min_next);			
			//UPDATE NEXT
			min_next.setPrevious(min_previous);	
			
			
			boolean removed = edgesIDSorted.remove(min);
//			boolean removed = edgesRadiusSorted.remove(min);			
//			System.out.println("REMOVE SUCCESSFUL: " + removed);
			if(removed) {
//				System.out.println("REMOVED: " + min);				
			}
//			
			
			edgesRadiusSorted.clear();
			edgesRadiusSorted.addAll(edgesIDSorted);
			
//			System.out.println("NOCH " +  edgesRadiusSorted.size() + " KANTEN.");
			
			
//			for (Edge edge : edgesRadiusSorted) {
//				System.out.println(edge);
//			}
			
			
			
			
			if(!removed) {
				System.err.println("REMOVE FAILED");
				break;
			}
			
			
			
			
		}
//		
//		System.out.println("*********** EDGES REMOVED ***********");
//		for (Edge edge : edgesRadiusSorted) {
//			System.out.println(edge);
//		}
//		
	
	
		if (!convexNodes.isEmpty()) {
			circleInformation.add(edgesRadiusSorted.first().getInkreis().getX().doubleValue());
			circleInformation.add(edgesRadiusSorted.first().getInkreis().getY().doubleValue());
			circleInformation.add(edgesRadiusSorted.first().getInkreis().getRadius().doubleValue());
			
//			System.out.println(circleInformation);

			return circleInformation;
		}
		
		

		throw new NullPointerException("no points available");

	}

}
