package de.feu.propra18.q9512268.app.main;

import java.util.Set;

import de.feu.propra18.q9512268.app.io.IOFacade;
import de.feu.propra18.q9512268.app.objects.Point;
import de.feu.propra18.q9512268.app.objects.SimplePoint;
import javafx.collections.FXCollections;
import javafx.collections.ObservableList;
import javafx.collections.transformation.SortedList;
import javafx.stage.FileChooser;

public class MainFacade {

	private static final MainFacade INSTANCE = new MainFacade();

	private IOFacade IOFACADE;
	private PointsContainer CONTAINER;

	private MainFacade() {
		this.IOFACADE = IOFacade.getInstance();
		this.CONTAINER = PointsContainer.get_Instance();
	}

	public static MainFacade get_Instance() {
		return INSTANCE;
	}

	public void add_Point(Point p) {
		CONTAINER.add_Point(p);
	}

	public void add_PointsRandom(int amount, double width, double height) {
		pointsRandom(amount, width, height);
	}

	public void add_PointsFromArray(int[][] pointArray) {
		IOFACADE.add_PointsFromArray(pointArray);
	}

	public void add_PointsFromFile(String fileName) {
		IOFACADE.add_PointsFromFile(fileName);
	}

	public void remove_Point(Point p) {
		CONTAINER.remove_Point(p);
	}

	public boolean contains_Point(Point p) {
		return CONTAINER.contains_Point(p);
	}

	public void clear_Points() {
		CONTAINER.remove_AllPoints();
	}

	public void clear_ConvexHullPoints() {
		CONTAINER.remove_AllConvexHullPoints();
	}

	public void clear_Container() {
		CONTAINER.remove_AllPoints();
		CONTAINER.remove_AllConvexHullPoints();
	}

	public ObservableList<Point> get_PointsAll() {
		return CONTAINER.get_PointsAll();
	}

	public ObservableList<Point> get_PointsAllOuter() {
		return CONTAINER.get_PointsAllOuter();
	}

	public SortedList<Point> get_PointsSorted() {
		return CONTAINER.get_PointsSorted();
	}

	public ObservableList<Double> get_PointsConvexHull() {
		return CONTAINER.get_PointsConvexHull();
	}

	public int[][] get_PointsConvexHull_asArray() {
		return CONTAINER.get_PointsConvexHull_asArray();
	}

	public void save_PointsToFile(String fileName) {
		IOFACADE.save_PointsToFile(fileName, FXCollections.unmodifiableObservableList(get_PointsAll()));
	}

	public FileChooser get_FileChooser() {
		return IOFACADE.get_FileChooser();
	}

	public void calculate_PointsConvexHull() {

		if (!get_PointsAll().isEmpty()) {
			final Set<SimplePoint> convexHullNodes = HullAlgorithm.getConvexHull();

			for (SimplePoint node : convexHullNodes) {
				CONTAINER.add_PointConvexHull((double) node.getX());
				CONTAINER.add_PointConvexHull((double) node.getY());
			}
		}

	}

	void pointsRandom(int amount, double width, double height) {

		final int max_width = (int) width;
		final int max_height = (int) height;

		int i = 0;
		while (i < amount) {

			int x = (int) (Math.random() * max_width);
			int y = (int) (Math.random() * max_height);

			Point p = new Point(x, y);
			if (!CONTAINER.contains_Point(p)) {
				CONTAINER.add_Point(p);
				i++;
			}
		}
	}

}
