package de.feu.propra18.q9512268.app.io;

import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

import de.feu.propra18.q9512268.app.main.MainFacade;
import de.feu.propra18.q9512268.app.objects.Point;
import de.feu.propra18.q9512268.gui.controller.MenuController;
import de.feu.propra18.q9512268.main.HullCalculatorImpl;

/**
 * Final class that provides function to read points from a file 
 * and add new {@link Point} instances to the {@link de.feu.propra18.q9512268.app.main.PointsContainer}.
 * <p/>Can only be accessed in a static way from the {@link IOFacade} class.
 * @author Christian Luetticke
 * @version 1.0
 */
final class FileInput {

	/**
	 * Private constructor to make sure class is only accessed in a static way.
	 */
	private FileInput() {

	}

	/**
	 * Takes as input a fileName pointing to a file containing point coordinates.
	 * <p/>Reads each line and passes it to {@link FileInput#addPointIfLineMatches(String, boolean)} with
	 * second parameter set to false as a 'contains'-test is not needed before inserting 
	 * points (duplicate points will be ignored during convex hull calculation).
	 * <p/>Is used by {@link HullCalculatorImpl#addPointsFromFile(String)}.
	 * 
	 * @param fileName The name of the file to be read.
	 * @see IOFacade#add_PointsFromFile(String)
	 */
	protected static void add_PointsFromFile(String fileName) {

		try (final BufferedReader reader = new BufferedReader(new FileReader(fileName))) {
			for (String line; (line = reader.readLine()) != null;) {
				addPointIfLineMatches(line, false);
			}
		} catch (final IOException e) {
			e.printStackTrace();
		}
	}

	/**
	 * Takes a line which was read from a file and tries to match it to a pattern (e.g. 100 200).
	 * <p/>If the line matches, a new {@link Point} gets created from matching x/y coordinates.
	 * @param line Read line from a file.
	 * @param containsTest Parameter to make sure contains is called before inserting
	 * new {@link Point} instances to the {@link de.feu.propra18.q9512268.app.main.PointsContainer}.
	 *
	 */
	private static void addPointIfLineMatches(String line, boolean containsTest) {

		final Pattern pattern = Pattern.compile("^-?(\\d+)\\s-?(\\d+)");
		final Matcher matcher = pattern.matcher(line);
		final boolean result = matcher.find();

		if (result) {
			final String[] coordinates = line.split(" ");

			final int x = Integer.parseInt(coordinates[0]);
			final int y = Integer.parseInt(coordinates[1]);
			if (containsTest) {
				Point p = new Point(x, y);
				if (!MainFacade.get_Instance().contains_Point(p)) {
					MainFacade.get_Instance().add_Point(x, y);
				}
			} else {
				MainFacade.get_Instance().add_Point(x, y);
			}

		}
	}

	/**
	 * Takes as input a fileName pointing to a file containing point coordinates.
	 * <p/>Reads each line and passes it to {@link FileInput#addPointIfLineMatches(String, boolean)}.
	 * <p/>Makes sure that duplicates for {@link Point} instances
	 * will by checked before adding them to the {@link de.feu.propra18.q9512268.app.main.PointsContainer}
	 * by calling {@link FileInput#addPointIfLineMatches(String, boolean)} to prevent errors in displaying 
	 * points in the user frontend.
	 * 
	 * @param fileName The name of the file to be read.
	 * @see IOFacade#add_PointsFromFile_noDuplicates(String)
	 * @see MenuController#initialize(java.net.URL, java.util.ResourceBundle)
	 */
	protected static void add_PointsFromFile_noDuplicates(String fileName) {
		try (final BufferedReader reader = new BufferedReader(new FileReader(fileName))) {
			for (String line; (line = reader.readLine()) != null;) {
				addPointIfLineMatches(line, true);
			}
		} catch (final IOException e) {
			e.printStackTrace();
		}

	}

}
