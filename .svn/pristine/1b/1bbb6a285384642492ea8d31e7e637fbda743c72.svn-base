package de.feu.propra18.q9512268.app.main;

import java.util.ArrayList;
import java.util.List;

import de.feu.propra18.q9512268.app.objects.SimplePoint;

final class LeftRightTester {
	
	private LeftRightTester() {
		
	}

	public static Curve getResult(SimplePoint A, SimplePoint B, SimplePoint C) {

		final long a_x = (long) A.getX();
		final long a_y = (long) A.getY();
		final long b_x = (long) B.getX();
		final long b_y = (long) B.getY();
		final long c_x = (long) C.getX();
		final long c_y = (long) C.getY();

		final long part1 = a_x * (b_y - c_y);
		final long part2 = b_x * (c_y - a_y);
		final long part3 = c_x * (a_y - b_y);

		long determinant = 0;
		try {
			determinant = Math.addExact(Math.addExact(part1, part2), part3);
		} catch (ArithmeticException e) {
			long[] parts = { part1, part2, part3 };
			determinant = newCalc(parts);
		}

		if (determinant > 0) {
			return Curve.CONCAVE;
		} else if (determinant < 0) {
			return Curve.CONVEX;
		} else {
			return Curve.COLLINEAR;
		}

	}

	private static long newCalc(long[] parts) {
		List<Long> pos = new ArrayList<Long>();
		List<Long> neg = new ArrayList<Long>();

		for (int i = 0; i < parts.length; i++) {
			long part = parts[i];
			long sig = Long.signum(part);
			if (sig == 1) {
				pos.add(part);
			} else {
				neg.add(part);
			}
		}

		return test_parts(pos, neg, 3);

	}

	private static long test_parts(List<Long> pos, List<Long> neg, int level) {
		if (pos.size() == level) {
			return 1;
		} else if (neg.size() == level) {
			return -1;
		} else {
			long sum = Math.addExact(pos.get(0), neg.get(0));
			pos.remove(0);
			neg.remove(0);
			long sumsig = Long.signum(sum);
			if (sumsig == 1) {
				pos.add(sum);
			} else {
				neg.add(sum);
			}

			return test_parts(pos, neg, level - 1);
		}
	}

}
