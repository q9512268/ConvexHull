package de.feu.propra18.q9512268.app.io;

import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

import de.feu.propra18.q9512268.app.main.MainFacade;
import de.feu.propra18.q9512268.app.objects.Point;

final class FileInput {

	private FileInput() {

	}

	protected static void add_PointsFromFile(String fileName) {

		try (final BufferedReader reader = new BufferedReader(new FileReader(fileName))) {
			for (String line; (line = reader.readLine()) != null;) {
				addPointIfLineMatches(line, false);
			}
		} catch (final IOException e) {
			e.printStackTrace();
		}
	}

	private static void addPointIfLineMatches(String line, boolean containsTest) {

		final Pattern pattern = Pattern.compile("^-?(\\d+)\\s-?(\\d+)");
		final Matcher matcher = pattern.matcher(line);
		final boolean result = matcher.find();

		if (result) {
			final String[] coordinates = line.split(" ");

			final int x = Integer.parseInt(coordinates[0]);
			final int y = Integer.parseInt(coordinates[1]);
			if (containsTest) {
				Point p = new Point(x, y);
				if (!MainFacade.get_Instance().contains_Point(p)) {
					MainFacade.get_Instance().add_Point(x, y);
				}
			} else {
				MainFacade.get_Instance().add_Point(x, y);
			}

		}
	}

	protected static void add_PointsFromFile_noDuplicates(String fileName) {
		try (final BufferedReader reader = new BufferedReader(new FileReader(fileName))) {
			for (String line; (line = reader.readLine()) != null;) {
				addPointIfLineMatches(line, true);
			}
		} catch (final IOException e) {
			e.printStackTrace();
		}

	}

}
