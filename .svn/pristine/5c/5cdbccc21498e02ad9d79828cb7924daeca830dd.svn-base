package de.feu.propra18.q9512268.app.main.algorithm.circle;

import java.util.Objects;

import de.feu.propra18.q9512268.app.objects.Point;
import de.feu.propra18.q9512268.app.objects.SimpleCircle;

class Edge {

	private Edge previous;
	private Edge next;

	private final int ID;

	private double startX;
	private double startY;
	private double endX;
	private double endY;

	private SimpleCircle inkreis;

	public Edge(int id, double startX, double startY, double endX, double endY) {

		this.ID = id;
		this.startX = startX;
		this.startY = startY;
		this.endX = endX;
		this.endY = endY;

		inkreis = new SimpleCircle();

	}

	public Edge getPrevious() {
		return previous;
	}

	public void setPrevious(Edge previous) {
		this.previous = previous;
		update_inkreis();
	}

	public Edge getNext() {
		return next;
	}

	public void setNext(Edge next) {
		this.next = next;
		update_inkreis();
	}

	public SimpleCircle getInkreis() {
		return inkreis;
	}

	private void update_inkreis() {
		InnerCircleCalculator.calculate_inkreis(this);
	}

	public int getID() {
		return ID;
	}

	public double getStartX() {
		return startX;
	}

	public void setStartX(double startX) {
		this.startX = startX;
	}

	public double getStartY() {
		return startY;
	}

	public void setStartY(double startY) {
		this.startY = startY;
	}

	public double getEndX() {
		return endX;
	}

	public void setEndX(double endX) {
		this.endX = endX;
	}

	public double getEndY() {
		return endY;
	}

	public void setEndY(double endY) {
		this.endY = endY;
	}

	/**
	 * Override hashCode method to create hash for {@link Point} instance only based
	 * on its initial x and y coordinates. Necessary to keep a constant hashCode
	 * while dragging a point on the canvas.
	 */
	@Override
	public int hashCode() {
		return Objects.hash(startX, startY, endX, endY);
	}

	/**
	 * Override equals method to compare to {@link Point} instance only based on its
	 * x and y coordinates.
	 */
	@Override
	public boolean equals(Object obj) {
		if (this == obj)
			return true;
		if (obj == null)
			return false;
		if (getClass() != obj.getClass())
			return false;
		Edge other = (Edge) obj;
		if (getStartX() != other.getStartX())
			return false;
		if (getStartY() != other.getStartY())
			return false;
		if (getEndX() != other.getEndX())
			return false;
		if (getEndY() != other.getEndY())
			return false;
		return true;
	}

	@Override
	public String toString() {

		if (previous != null && next != null) {
			return "[ " + this.hashCode() + " ](((( " + ID + " )))) " + "previous = " + previous.ID + " [[[[" + startX
					+ "/" + startY + "/" + endX + "/" + endY + ", r=" + inkreis.getRadius().doubleValue() + "]]]] "
					+ "next = " + next.ID;
		}
		if (previous != null) {
			return "[ " + this.hashCode() + " ] (((( " + ID + " )))) " + "previous = " + previous.startX + "/"
					+ previous.startY + "/" + previous.endX + "/" + previous.endY + " [[[[" + startX + "/" + startY
					+ "/" + endX + "/" + endY + ", r=" + inkreis.getRadius().doubleValue() + "]]]] next = null";
		} else if (next != null) {
			return "[ " + this.hashCode() + " ] (((( " + ID + " )))) " + "previous = null " + " [[[[" + startX + "/"
					+ startY + "/" + endX + "/" + endY + ", r=" + inkreis.getRadius().doubleValue() + "]]]] "
					+ "next = " + next.startX + "/" + next.startY + "/" + next.endX + "/" + next.endY;

		}

		return "[ " + this.hashCode() + " ] (((( " + ID + " )))) " + "previous = null " + " [[[[" + startX + "/"
				+ startY + "/" + endX + "/" + endY + ", r=" + inkreis.getRadius().doubleValue() + "]]]] "
				+ "next = null";

	}

}
