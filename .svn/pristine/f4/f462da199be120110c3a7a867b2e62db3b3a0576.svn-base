package de.feu.propra18.q9512268.app.main;

import java.util.Set;

import de.feu.propra18.q9512268.app.io.IOFacade;
import de.feu.propra18.q9512268.app.objects.Point;
import de.feu.propra18.q9512268.app.objects.PointType;
import de.feu.propra18.q9512268.app.objects.SimplePoint;
import de.feu.propra18.q9512268.gui.controller.MenuController;
import de.feu.propra18.q9512268.gui.controller.ToolBarController;
import javafx.collections.FXCollections;
import javafx.collections.ObservableList;
import javafx.collections.transformation.SortedList;
import javafx.stage.FileChooser;

/**
 * This class, realised as a singleton instance, provides access to the main
 * functions of the application. It encapsulates access to the {@link IOFacade}
 * and the {@link PointsContainer}.
 * 
 * @author Christian Luetticke
 * @version 1.0
 */
public class MainFacade {

	/**
	 * Final singleton instance of the {@link MainFacade} class. <br/>
	 * Gets created when accessed the first time.
	 */
	private static final MainFacade INSTANCE = new MainFacade();

	/**
	 * Reference to the {@link IOFacade} singleton instance.
	 */
	private IOFacade IOFACADE;
	/**
	 * Reference to the {@link PointsContainer} singleton instance.
	 */
	private PointsContainer CONTAINER;

	/**
	 * Private constructor which can never be called directly.
	 * <p/>
	 * Only instantiated when accessing {@link MainFacade#INSTANCE} for the first
	 * time.
	 * <p/>
	 * Calls {@link IOFacade#getInstance()} to get a reference to the
	 * {@link IOFacade} singleton.
	 * <p/>
	 * Calls {@link PointsContainer#getInstance()} to get a reference to the
	 * {@link PointsContainer} singleton.
	 */
	private MainFacade() {
		this.IOFACADE = IOFacade.getInstance();
		this.CONTAINER = PointsContainer.get_Instance();
	}

	/**
	 * Get access to the {@link MainFacade#INSTANCE}.
	 * 
	 * @return The MainFacade instance.
	 */
	public static MainFacade get_Instance() {
		return INSTANCE;
	}

	/**
	 * Add a new {@link Point} to {@link PointsContainer}. <br/>
	 * Delegates request to {@link PointsContainer#add_Point(Point)}
	 * 
	 * @param p
	 *            The Point to add.
	 * @see {@link PointsContainer#get_PointsAll()}
	 * @see {@link PointsContainer#get_PointsAllOuter()}
	 * @see {@link PointsContainer#get_PointsSorted()}
	 */
	public void add_Point(Point p) {
		CONTAINER.add_Point(p);
	}

	/**
	 * Can be called when random {@link Point} instances should be added to the
	 * visible canvas. Delegates request to
	 * {@link MainFacade#pointsRandom(int, double, double)}
	 * 
	 * @param amount
	 *            How many points should be added.
	 * @param width
	 *            Width of the area in which random points should be generated.
	 * @param height
	 *            Height of the area in which random points should be generated.
	 * @see {@link ToolBarController}
	 */
	public void add_PointsRandom(int amount, double width, double height) {
		pointsRandom(amount, width, height);
	}

	/**
	 * Delegates request to add {@link Point} instances from a 2D array to
	 * {@link IOFacade#add_PointsFromArray(int[][])}.
	 * 
	 * @param pointArray
	 *            2D array of x/y coordinates.
	 */
	public void add_PointsFromArray(int[][] pointArray) {
		IOFACADE.add_PointsFromArray(pointArray);
	}

	/**
	 * Takes as input a fileName pointing to a file containing point coordinates.
	 * <p/>
	 * Delegates the request to {@link IOFacade#add_PointsFromFile(String)}.
	 * 
	 * @param fileName
	 *            The name of the file to be read. void
	 */
	public void add_PointsFromFile(String fileName) {
		IOFACADE.add_PointsFromFile(fileName);
	}

	/**
	 * Remove an existing {@link Point} from {@link PointsContainer}. <br/>
	 * Delegates request to {@link PointsContainer#remove_Point(Point)}
	 * 
	 * @param p
	 *            The Point to be removed.
	 * @see {@link PointsContainer#get_PointsAll()}
	 * @see {@link PointsContainer#get_PointsAllOuter()}
	 * @see {@link PointsContainer#get_PointsSorted()}
	 */
	public void remove_Point(Point p) {
		CONTAINER.remove_Point(p);
	}

	/**
	 * Method to verify a {@link Point} instance already exists. <br/>
	 * Delegates request to {@link PointsContainer#contains_Point(Point)}
	 * 
	 * @param p
	 * @return boolean
	 */
	public boolean contains_Point(Point p) {
		return CONTAINER.contains_Point(p);
	}

	/**
	 * To call when all current {@link Point} instances should be removed. <br/>
	 * Delegates call to {@link PointsContainer#remove_AllPoints()} which removes
	 * all {@link PointType#INNER} and O{@link PointType#OUTER} {@link Point}
	 * instances.
	 */
	public void clear_Points() {
		CONTAINER.remove_AllPoints();
	}

	/**
	 * To call when all current {@link Point} instances that belong to the convx
	 * hull should be removed. <br/>
	 * Delegates call to {@link PointsContainer#remove_AllConvexHullPoints()}.
	 */
	public void clear_ConvexHullPoints() {
		CONTAINER.remove_AllConvexHullPoints();
	}

	/**
	 * To call when all current {@link Point} instances - also those which belong to
	 * the convex hull - should be removed.
	 * 
	 * @see {@link PointsContainer#remove_AllCPoints()}.
	 * @see {@link PointsContainer#remove_AllConvexHullPoints()}.
	 */
	public void clear_Container() {
		CONTAINER.remove_AllPoints();
		CONTAINER.remove_AllConvexHullPoints();
	}

	/**
	 * Returns all current {@link Point} instances from Type
	 * {@link PointType#INNER}.
	 * 
	 * @return ObservableList<Point> The ObservableList containing the current
	 *         points.
	 * @see {@link PointsContainer#get_PointsAll()}
	 */
	public ObservableList<Point> get_PointsAll() {
		return CONTAINER.get_PointsAll();
	}

	/**
	 * Returns all current {@link Point} instances from Type
	 * {@link PointType#OUTER}.
	 * 
	 * @return ObservableList<Point> The ObservableList containing the current
	 *         points.
	 * @see {@link PointsContainer#get_PointsAllOuter()}
	 */
	public ObservableList<Point> get_PointsAllOuter() {
		return CONTAINER.get_PointsAllOuter();
	}

	/**
	 * Returns all current {@link Point} instances from Type {@link PointType#INNER}
	 * sorted depending on their x coordinates.
	 * 
	 * @return SortedList<Point> The ObservableList containing the current points
	 *         sorted.
	 * @see {@link PointsContainer#get_PointsSorted()}
	 */
	public SortedList<Point> get_PointsSorted() {
		return CONTAINER.get_PointsSorted();
	}

	/**
	 * Returns all current coordinates that belong to the convex hull.
	 * <br/>Coordinates are represented as Double values to bind them to the polygon created in {@link MenuController}.
	 * 
	 * @return ObservableList<Double> The ObservableList containing the current
	 *         convex hull points represented by Double values.
	 * @see {@link PointsContainer#get_PointsConvexHull()}
	 */
	public ObservableList<Double> get_PointsConvexHull() {
		return CONTAINER.get_PointsConvexHull();
	}

	/**
	 * Return tall current {@link Point} instances that belong to the convex hull in
	 * form of a 2D int array. Delegates request to
	 * {@link PointsContainer#get_PointsConvexHull_asArray()}
	 * 
	 * @return int[][]
	 */
	public int[][] get_PointsConvexHull_asArray() {
		return CONTAINER.get_PointsConvexHull_asArray();
	}

	/**
	 * Delegates the request to export points to a file to
	 * {@link IOFacade#save_PointsToFile(String, java.util.List)}.
	 * <p/>
	 * Passes current {@link Point} instances from Type {@link PointType#INNER} in
	 * form of an unmodifiableObservableList to {@link IOFacade}.
	 * 
	 * @param fileName
	 *            Name of file to export points to.
	 */
	public void save_PointsToFile(String fileName) {
		IOFACADE.save_PointsToFile(fileName, FXCollections.unmodifiableObservableList(get_PointsAll()));
	}

	/**
	 * Get access to the {@link CustomFileChooser#fc}.
	 * <br/>Delegates request to {@link IOFacade#get_FileChooser()}.
	 * 
	 * @return The FileChooser instance.
	 */
	public FileChooser get_FileChooser() {
		return IOFACADE.get_FileChooser();
	}

	/**
	 * Is called when the convex hull should be calculated.
	 * <br/>This method makes a call to {@link HullAlgorithm#getConvexHull()}, loops through the results in form
	 * of {@link SimplePoint} instances and adds the corresponding x and y coordinates to the convex hull.
	 * @see {@link PointsContainer#add_PointConvexHull(Double)}
	 */
	public void calculate_PointsConvexHull() {

		if (!get_PointsAll().isEmpty()) {
			final Set<SimplePoint> convexHullNodes = HullAlgorithm.getConvexHull();

			for (SimplePoint node : convexHullNodes) {
				CONTAINER.add_PointConvexHull((double) node.getX());
				CONTAINER.add_PointConvexHull((double) node.getY());
			}
		}

	}

	/**
	 * Called from {@link MainFacade#add_PointsRandom(int, double, double)} when random {@link Point} instances should be added to the
	 * visible canvas. 
	 * 
	 * @param amount
	 *            How many points should be added.
	 * @param width
	 *            Width of the area in which random points should be generated.
	 * @param height
	 *            Height of the area in which random points should be generated.
	 * @see {@link PointsContainer#add_Point(Point)}
	 * @see {@link ToolBarController}
	 */
	void pointsRandom(int amount, double width, double height) {

		final int max_width = (int) width;
		final int max_height = (int) height;

		int i = 0;
		while (i < amount) {

			int x = (int) (Math.random() * max_width);
			int y = (int) (Math.random() * max_height);

			Point p = new Point(x, y);
			if (!CONTAINER.contains_Point(p)) {
				CONTAINER.add_Point(p);
				i++;
			}
		}
	}

}
